// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.StrongHold2016;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainleftSpeedControllerOne;
    public static SpeedController driveTrainrightSpeedControllerOne;
    public static SpeedController driveTrainrightSpeedControllerTwo;
    public static SpeedController driveTrainleftSpeedControllerTwo;
    public static RobotDrive driveTrainRobotDrive;
    public static SpeedController gatherergathererMotor;
    public static SpeedController gatherergathererArmLiftMotor;
    public static DigitalInput gathererlimitSwitchUp;
    public static DigitalInput gathererlimitSwitchDown;
    public static DigitalInput gathererlimitSwitchGathererIn;
    public static SpeedController scalerscalerMotor;
    public static Relay scalerscalerRelease;
    public static Encoder scalerscalerEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainleftSpeedControllerOne = new TalonSRX(0);
        LiveWindow.addActuator("DriveTrain", "leftSpeedControllerOne", (TalonSRX) driveTrainleftSpeedControllerOne);
        
        driveTrainrightSpeedControllerOne = new TalonSRX(3);
        LiveWindow.addActuator("DriveTrain", "rightSpeedControllerOne", (TalonSRX) driveTrainrightSpeedControllerOne);
        
        driveTrainrightSpeedControllerTwo = new TalonSRX(4);
        LiveWindow.addActuator("DriveTrain", "rightSpeedControllerTwo", (TalonSRX) driveTrainrightSpeedControllerTwo);
        
        driveTrainleftSpeedControllerTwo = new TalonSRX(1);
        LiveWindow.addActuator("DriveTrain", "leftSpeedControllerTwo", (TalonSRX) driveTrainleftSpeedControllerTwo);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainleftSpeedControllerOne, driveTrainleftSpeedControllerTwo,
              driveTrainrightSpeedControllerOne, driveTrainrightSpeedControllerTwo);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        gatherergathererMotor = new VictorSP(6);
        LiveWindow.addActuator("Gatherer", "gathererMotor", (VictorSP) gatherergathererMotor);
        
        gatherergathererArmLiftMotor = new VictorSP(5);
        LiveWindow.addActuator("Gatherer", "gathererArmLiftMotor", (VictorSP) gatherergathererArmLiftMotor);
        
        gathererlimitSwitchUp = new DigitalInput(0);
        LiveWindow.addSensor("Gatherer", "limitSwitchUp", gathererlimitSwitchUp);
        
        gathererlimitSwitchDown = new DigitalInput(1);
        LiveWindow.addSensor("Gatherer", "limitSwitchDown", gathererlimitSwitchDown);
        
        gathererlimitSwitchGathererIn = new DigitalInput(2);
        LiveWindow.addSensor("Gatherer", "limitSwitchGathererIn", gathererlimitSwitchGathererIn);
        
        scalerscalerMotor = new Talon(2);
        LiveWindow.addActuator("Scaler", "scalerMotor", (Talon) scalerscalerMotor);
        
        scalerscalerRelease = new Relay(0);
        LiveWindow.addActuator("Scaler", "scalerRelease ", scalerscalerRelease);
        
        scalerscalerEncoder = new Encoder(3, 4, false, EncodingType.k4X);
        LiveWindow.addSensor("Scaler", "scalerEncoder", scalerscalerEncoder);
        scalerscalerEncoder.setDistancePerPulse(1.0);
        scalerscalerEncoder.setPIDSourceType(PIDSourceType.kRate);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
