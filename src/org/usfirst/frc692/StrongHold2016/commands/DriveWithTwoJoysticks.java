// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.StrongHold2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc692.StrongHold2016.Robot;

/**
 *
 */
public class DriveWithTwoJoysticks extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveWithTwoJoysticks() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	/* 
    	 SmartDashboard.putNumber("rightJoystick", Robot.oi.rightJoystick.getX());
         SmartDashboard.putNumber("leftJoystick", Robot.oi.leftJoystick.getX());
         
    	double leftVal = Robot.oi.leftJoystick.getY();
    	double rightVal = Robot.oi.rightJoystick.getY();
    	        
    	double oppositeLeftVal = leftVal * -1.0;
    	double oppositeRightVal = rightVal * -1.0;
    	Robot.driveTrain.takeJoystickAxisValues(rightVal, leftVal);
    	*/
    	SmartDashboard.putNumber("xAxisJoystick", Robot.oi.leftJoystick.getX());
        SmartDashboard.putNumber("yAxisJoystick", Robot.oi.leftJoystick.getY());
        
        double precision = .9;
        double xAxis = Robot.oi.leftJoystick.getX();
        double yAxis = Robot.oi.leftJoystick.getY();
       
        xAxis = Math.round(xAxis * precision) / precision;
        yAxis = Math.round(yAxis * precision) / precision;
        
        double leftMotor  = 0;
        double rightMotor = 0;
        
    //  Compute the angle in degrees
        double hypotenuse = Math.sqrt( ( xAxis * xAxis ) + ( yAxis * yAxis ) );
        double radian     = Math.acos( Math.abs( xAxis ) / hypotenuse );
        double angle      = ( radian *180 ) / Math.PI;
        
    //  The angle indicates the measure of turn.
    //  Along a straight line, with angle o, the turn coefficient is the same 
    //  for angles 0-90.
    //      angle  0 = -1
    //      angle 45 =  0
    //      angle 90 =  1
        double coefficient = -1 + ( angle / 90 ) * 2;
        double turn        = coefficient * Math.abs( Math.abs( yAxis ) - Math.abs( xAxis ) );
        
        turn = Math.round( turn * 100 ) / 100;
        
    //  Max of x-Axis or y-Axis is the movement
        double movement = Math.max( Math.abs( yAxis ), Math.abs( xAxis ) );
        
    //  First and third quadrant
        if ( ( ( xAxis >= 0 ) && ( yAxis >= 0 ) ) || ( ( xAxis < 0 ) && ( yAxis < 0 ) )  )
        {
            leftMotor  = movement;
            rightMotor = turn;
        }
        else
        {
            leftMotor  = turn;
            rightMotor = movement;
        }
        
    //  Reverse polarity
        if ( yAxis < 0 )
        {
            leftMotor  = 0 - leftMotor;
            rightMotor = 0 - rightMotor;
        }
        
        SmartDashboard.putNumber("rightMotor", rightMotor);
        SmartDashboard.putNumber("leftMotor", leftMotor);
        
        Robot.driveTrain.takeJoystickAxisValues(leftMotor, rightMotor);
        
        
    }
    
    

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
