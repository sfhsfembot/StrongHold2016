// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.StrongHold2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc692.StrongHold2016.Robot;

import com.ni.vision.NIVision;

/**
 *
 */
public class SwitchCamera extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public SwitchCamera() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {

    	SmartDashboard.putBoolean("Joystick Button is pressed!", Robot.oi.switchCameraButtonThree.get());
    	// smart dash board prints out "Joystick button is pressed"
    	// KK 2/20/16
    	
    	if(Robot.oi.switchCameraButtonThree.get()) {
    		// this button will switch between the two cameras
    		// KK 2/20/16
    		if(Robot.currSession == Robot.sessionfront) {
    			NIVision.IMAQdxStopAcquisition(Robot.currSession);
    			Robot.currSession = Robot.sessionback;
    			NIVision.IMAQdxConfigureGrab(Robot.currSession);
    		}
    		// if power is sent to camera one image will display on camera one
    		// KK 2/20/16
  
    		else if(Robot.currSession == Robot.sessionback) {
    			NIVision.IMAQdxStopAcquisition(Robot.currSession);
    			Robot.currSession = Robot.sessionfront;
    			NIVision.IMAQdxConfigureGrab(Robot.currSession);
    		}
    		// if power is not sent to camera one display image will be on camera two
    		// KK 2/20/16
    	}
    }
    
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
